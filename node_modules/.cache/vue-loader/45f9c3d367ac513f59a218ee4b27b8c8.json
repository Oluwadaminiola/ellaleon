{"remainingRequest":"C:\\Users\\SBSC\\Desktop\\side\\ellaleon\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\SBSC\\Desktop\\side\\ellaleon\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\SBSC\\Desktop\\side\\ellaleon\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\SBSC\\Desktop\\side\\ellaleon\\src\\views\\About.vue?vue&type=template&id=039c5b43&","dependencies":[{"path":"C:\\Users\\SBSC\\Desktop\\side\\ellaleon\\src\\views\\About.vue","mtime":1604613848859},{"path":"C:\\Users\\SBSC\\Desktop\\side\\ellaleon\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\SBSC\\Desktop\\side\\ellaleon\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\SBSC\\Desktop\\side\\ellaleon\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\SBSC\\Desktop\\side\\ellaleon\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}